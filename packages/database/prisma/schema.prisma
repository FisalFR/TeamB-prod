// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../.prisma/client"
  engineType      = "binary"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
  // env("POSTGRES_URL")
  // "postgresql://teamb:teamb20@database.cs.wpi.edu:5432/teambdb?schema=teamb"
}

// example table used in the express router example
model HighScore {
  id    Int      @id @default(autoincrement())
  time  DateTime
  score Int
}

model nodes {
  nodeID    String  @id
  xcoord    Int
  ycoord    Int
  floor     String
  building  String
  nodeType  String
  longName  String
  shortName String
  startEdge edges[] @relation(name: "startNode")
  endEdge   edges[] @relation(name: "endNode")
}

model edges {
  edgeID      String @id
  startNodeID String
  endNodeID   String
  startNode   nodes  @relation(name: "startNode", fields: [startNodeID], references: [nodeID])
  endNode     nodes  @relation(name: "endNode", fields: [endNodeID], references: [nodeID])
}

model users {
  username  String     @id
  password  String
  firstName String
  lastName  String
  gender    String
  type      String
  patients  patient[]  @relation(name: "patientUsernameID")
  employees employee[] @relation(name: "employeeUsernameID")
}

model patient {
  patientUsername   String @id
  reasonToStay      String
  patientUsernameID users  @relation(name: "patientUsernameID", fields: [patientUsername], references: [username])
}

model employee {
  employeeUsername   String        @id
  salary             Int
  employeeUsernameID users         @relation(name: "employeeUsernameID", fields: [employeeUsername], references: [username])
  interpreters       interpreter[] @relation(name: "interpreterUsernameID")
}

model interpreter {
  interpreterUsername   String   @id
  language              String
  native                Boolean
  interpreterUsernameID employee @relation(name: "interpreterUsernameID", fields: [interpreterUsername], references: [employeeUsername])
}

model forms {
  formID              Int                           @id
  status              String
  type                String
  assignee            String
  dateCreated         DateTime                      @default(now())
  location            String
  languageRequests    languageInterpreterRequests[] @relation(name: "languageRequestID")
  maintenanceRequests maintenances[]                @relation(name: "maintenanceRequestID")
}

model languageInterpreterRequests {
  languageRequest   Int    @id
  language          String
  languageRequestID forms  @relation(name: "languageRequestID", fields: [languageRequest], references: [formID])
}

model maintenances {
  maintenanceRequest   Int    @id
  issue                String
  isUrgent             String
  feedback             String
  maintenanceRequestID forms  @relation(name: "maintenanceRequestID", fields: [maintenanceRequest], references: [formID])
}
